function calculoDelYc() {
    let ycl = []
    let Acl = []
    let Pml = []
    let Rhl = []
    let Tl = []
    let Dhl = []
    let Frl = []
    let cambioFrl = []
    let Esl = []
    let aux = true;
    var Yc = (document.getElementById("yc").value) * 1
    var pasos = (document.getElementById("steps").value) * 1
    var Y = (document.getElementById("y0").value) * 1
    var b0 = (document.getElementById("b0").value) * 1
    var b1 = (document.getElementById("b1").value) * 1
    var b2 = (document.getElementById("b2").value) * 1
    var m1 = (document.getElementById("m1").value) * 1
    var m2 = (document.getElementById("m2").value) * 1
    var m3 = (document.getElementById("m3").value) * 1
    var m4 = (document.getElementById("m4").value) * 1
    var h1 = (document.getElementById("h1").value) * 1
    var h2 = (document.getElementById("h2").value) * 1
    var h3 = (document.getElementById("h3").value) * 1
    var h4 = (document.getElementById("h4").value) * 1
    var q = (document.getElementById("Q").value) * 1
    var x0 = (document.getElementById("x0").value) * 1

    //For i = 1 To pasos

    for (let i = 1; i < pasos; i++) {
        //Si h1=h2
        if (h1 == h2 && Yc <= h1) {
            A = (b0 * Yc) + ((m1 * Math.pow((Yc), 2)) / 2) + ((m2 * Math.pow((Yc), 2)) / 2)
            Pm = b0 + Yc * Math.sqrt((m1) ^ 2 + 1) + Yc * Math.sqrt(Math.pow((m2), 2) + 1)
            T = b0 + (m1 * Yc) + (m2 * Yc)
            console.log(Yc)
            console.log(b0)
            console.log(m1)
            console.log(m2)
            Tl.push(T)


            aux = true;
            console.log("h1 = h2 && Yc <= h1")
        }

        if (h1 == h2 && Yc > h1 && Yc <= (h1 + h3) && Yc <= (h2 + h4)) {
            A = (b0 * h1) + ((m1 * Math.pow((h1), 2)) / 2) + ((m2 * Math.pow((h2), 2)) / 2) + (b1 + b0 + b2 + m1 * h1 + m2 * h2) * (Yc - h2) + (m3 * Math.pow((Yc - h2), 2)) / 2 + (m4 * Math.pow((Yc - h2), 2)) / 2
            Pm = b0 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + (Yc - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + b2 + (Yc - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = m3 * (Yc - h1) + b1 + (m1 * h1) + b0 + (m2 * h2) + b2 + m4 * (Yc - h2)

            aux = true;

            console.log("h1 = h2 && Yc > h1 && Yc <= (h1 + h3) && Yc <= (h2 + h4)")
        }

        if (h1 == h2 && Yc > (h1 + h3) || Yc > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            aux = false;
            break;

        }

        if (h1 == h2 && Yc > (h1 + h3) && Yc > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            aux = false;
            break;
        }

        //Si h2>h1

        if (h2 > h1 && Yc <= h1) {
            A = (b0 * Yc) + ((m1 * Math.pow(Yc, 2)) / 2) + ((m2 * Math.pow(Yc, 2)) / 2)
            Pm = b0 + (Yc * Math.sqrt(Math.pow(m1, 2) + 1)) + (Yc * Math.sqrt(Math.pow(m2, 2) + 1))
            T = b0 + (m1 * Yc) + (m2 * Yc)
            console.log("h2 > h1 && Yc <= h1")
            aux = true;
        }

        if (h2 > h1 && Yc > h1 && Yc < h2) {
            A = (b0 * Yc) + (m2 * Math.pow((Yc), 2)) / 2 + (m1 * Math.pow((h1), 2)) / 2 + (m3 * Math.pow((Yc - h1), 2)) / 2 + (b1 + m1 * h1) * (Yc - h1)
            Pm = b0 + (Yc - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + Yc * Math.sqrt(Math.pow((m2), 2) + 1)
            T = (Yc - h1) * m3 + b1 + m1 * h1 + b0 + m2 * Yc


            aux = true;
            console.log("h2 > h1 && Yc > h1 && Yc < h2")
        }

        if (h2 > h1 && Yc > h2 && Yc <= (h1 + h3) && Yc <= (h2 + h4)) {
            A = b0 * Yc + (m2 * Math.pow((h2), 2)) / 2 + (m1 * Math.pow((h1), 2)) / 2 + (m3 * Math.pow((Yc - h1), 2)) / 2 + (b1 + m1 * h1) * (Yc - h1) + (b2 + m2 * h2) * (Yc - h2) + (m4 * Math.pow((Yc - h2), 2)) / 2
            Pm = (Yc - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yc - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = m3 * (Yc - h1) + b1 + m1 * h1 + b0 + m2 * h2 + b2 + m4 * (Yc - h2)

            aux = true;

            console.log("h2 > h1 && Yc > h2 && Yc <= (h1 + h3) && Yc <= (h2 + h4)")
        }

        if (h2 > h1 && Yc > (h1 + h3) || Yc > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            aux = false;
            break;
        }

        if (h2 > h1 && Yc > (h1 + h3) && Yc > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            aux = false;
            break;
        }

        //Si h2<h1

        if (h2 < h1 && Yc <= h2) {
            A = (b0 * Yc) + (m1 * Math.pow((Yc), 2)) / 2 + (m2 * Math.pow((Yc), 2)) / 2
            Pm = b0 + Yc * Math.sqrt(1 + Math.pow((m1), 2)) + Yc * Math.sqrt(1 + Math.pow((m2), 2))
            T = (m1 * Yc) + b0 + (m2 * Yc)
            aux = true;
        }

        if (h2 < h1 && Yc > h2 && Yc < h1) {
            A = (b0 * Yc) + (m1 * Math.pow((Yc), 2)) / 2 + (m2 * Math.pow((h2), 2)) / 2 + (m2 * h2 + b2) * (Yc - h2) + (m4 * Math.pow((Yc - h2), 2)) / 2
            Pm = Yc * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yc - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = b0 + (m1 * Yc) + (m2 * h2) + b2 + m4 * (Yc - h2)
            aux = true;


        }

        if (h2 < h1 && Yc > h1 && Yc <= (h1 + h3) && Yc <= (h2 + h4)) {
            A = (m3 * Math.pow((Yc - h1), 2)) / 2 + (b1 + m1 * h1) * (Yc - h1) + (m1 * Math.pow((h1), 2)) / 2 + b0 * Yc + (m2 * Math.pow((h2), 2)) / 2 + (b2 + m2 * h2) * (Yc - h2) + (m4 * Math.pow((Yc - h2), 2)) / 2
            Pm = (Yc - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yc - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = (Yc - h1) * m3 + b1 + m1 * h1 + b0 + m2 * h2 + b2 + m4 * (Yc - h2)


            aux = true;
        }

        if (h2 < h1 && Yc > (h1 + h3) || Yc > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            aux = false;
            break;
        }

        if (h2 < h1 && Yc > (h1 + h3) && Yc > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            aux = false;
            break;
        }

        //Formulas
        Rh = A / Pm
        Dh = A / T
        Fr = q / (A * Math.sqrt(9.81 * Dh))
        cambioFr = (1 - Fr) / 2
        Acl.push(A)
        Pml.push(Pm)
        Tl.push(T)
        Es = Yc + ((1 * Math.pow(q, 2)) / (Math.pow((A), 2) * 2 * 9.81))
        //Para poner los resultados en las tablas
        ycl.push(Yc)
        Rhl.push(Rh)
        Dhl.push(Dh)
        Frl.push(Fr)
        cambioFrl.push(cambioFr)
        Esl.push(Es)
        //Yc = ((Q) ^ 2 / 9.81) ^ (1 / 3) * ((T + (m1 + m2) * Yc) / ((T + ((m1 + m2) / 2) * Yc) ^ 3)) ^ (1 / 3)
        Yc = Yc - (1 - Fr) / 2
        console.log(Yc)
    }
    if (aux = true) {
        //Yc calculado
        let body = document.getElementById("outputyc");
        body.innerHTML = "<h6>" + Yc.toFixed(4) + "</h6>";

        let tbody = document.getElementById('criticalDepthBody');
        tbody.innerHTML = "";
        for (let index = 0; index < pasos - 1; index++) {
            let row = ""
            row += "<tr>"
            row += "<td>" + ycl[index].toFixed(4) + "</td>"
            row += "<td>" + Acl[index].toFixed(4) + "</td>"
            row += "<td>" + Rhl[index].toFixed(4) + "</td>"
            row += "<td>" + Pml[index].toFixed(4) + "</td>"
            row += "<td>" + Tl[index].toFixed(4) + "</td>"
            row += "<td>" + Dhl[index].toFixed(4) + "</td>"
            row += "<td>" + Frl[index].toFixed(4) + "</td>"
            row += "<td>" + cambioFrl[index].toFixed(4) + "</td>"
            row += "<td>" + Esl[index].toFixed(4) + "</td>"
            row += "</tr>"
            tbody.innerHTML += row;
        }
    }
    let x1 = 0;
    let x2 = m3 * h3
    let x3 = x2 + b2
    let x4 = x3 + (m2 * h2)
    let x5 = x4 + b0;
    let x6 = x5 + (m1 * h1)
    let x7 = x6 + b1
    let x8 = x7 + (h4 * m4)
    let y1 = m2 + m3
    let y2 = h2
    let y3 = y1
    let y4 = 0
    let y5 = 0
    let y6 = h1
    let y7 = h1
    let y8 = y7 + h4
    let x = [x1, x2, x3, x4, x5, x6, x7, x8]
    let y = [y1, y2, y3, y4, y5, y6, y7, y8]
    //Grafica
    var seccion = {
        x: x,
        y: y,
        mode: 'lines'
    }
    data = [seccion]
    Plotly.newPlot('graphDiv', data)
}

//Calculo_de_Yn
//Inicialmente definimos las variables con que trabajaremos
function calculoDeYn() {
    console.log("yn")
    let Al = []
    let Pml = []
    let Rhl = []
    let Tl = []
    let nel = []
    let Dhl = []
    let Frl = []
    let Esl = []
    let Fsl = []
    let sFl = []
    let Qcl = []
    let cambioQl = []
    let ynl = []
    let verificador = false;
    var Yn = parseFloat(document.getElementById("yn").value)
    var pasos = parseFloat(document.getElementById("steps").value)
    var Y = parseFloat(document.getElementById("y0").value)
    var b0 = parseFloat(document.getElementById("b0").value)
    var b1 = parseFloat(document.getElementById("b1").value)
    var b2 = parseFloat(document.getElementById("b2").value)
    var m1 = parseFloat(document.getElementById("m1").value)
    var m2 = parseFloat(document.getElementById("m2").value)
    var m3 = parseFloat(document.getElementById("m3").value)
    var m4 = parseFloat(document.getElementById("m4").value)
    var h1 = parseFloat(document.getElementById("h1").value)
    var h2 = parseFloat(document.getElementById("h2").value)
    var h3 = parseFloat(document.getElementById("h3").value)
    var h4 = parseFloat(document.getElementById("h4").value)
    var n_b0 = parseFloat(document.getElementById("n0").value)
    var n_b1 = parseFloat(document.getElementById("n01").value)
    var n_b2 = parseFloat(document.getElementById("n02").value)
    var n_m1 = parseFloat(document.getElementById("n1").value)
    var n_m2 = parseFloat(document.getElementById("n2").value)
    var n_m3 = parseFloat(document.getElementById("n3").value)
    var n_m4 = parseFloat(document.getElementById("n4").value)
    var q = parseFloat(document.getElementById("Q").value)
    console.log(q)
    var So = parseFloat(document.getElementById("So").value)
    console.log(So)
    var x0 = parseFloat(document.getElementById("x0").value);

    for (let i = 0; i < pasos; i++) {
        //Si h1=h2
        console.log(Yn)
        if (h1 == h2 && Yn <= h1) {
            A = (b0 * Yn) + ((m1 * Math.pow((Yn), 2)) / 2) + ((m2 * Math.pow((Yn), 2)) / 2)
            Pm = b0 + Yn * Math.sqrt(Math.pow((m1), 2) + 1) + Yn * Math.sqrt(Math.pow((m2), 2) + 1)
            T = b0 + (m1 * Yn) + (m2 * Yn)
            ne = Math.pow((((Yn * Math.sqrt(Math.pow((m1), 2) + 1) * Math.pow((n_m1), (3 / 2))) + (b0 * Math.pow((n_b0), (3 / 2))) + (Yn * Math.sqrt(Math.pow((m2), 2) + 1) * Math.pow((n_m2), (3 / 2)))) / Pm), (2 / 3))
            console.log("h1 == h2 && Yn <= h1")
            verificador = true;
        }

        if (h1 == h2 && Yn > h1 && Yn <= (h1 + h3) && Yn <= (h2 + h4)) {
            A = (b0 * h1) + ((m1 * Math.pow((h1), 2)) / 2) + ((m2 * Math.pow((h2), 2)) / 2) + (b1 + b0 + b2 + m1 * h1 + m2 * h2) * (Yn - h2) + (m3 * Math.pow((Yn - h2), 2)) / 2 + (m4 * Math.pow((Yn - h2), 2)) / 2
            Pm = b0 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + (Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + b2 + (Yn - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = m3 * (Yn - h1) + b1 + (m1 * h1) + b0 + (m2 * h2) + b2 + m4 * (Yn - h2)
            ne = Math.pow(((((Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) * Math.pow((n_m3), (3 / 2))) + (b1 * Math.pow((n_b1), (3 / 2))) + (h1 * Math.sqrt(Math.pow((m1), 2) + 1) * Math.pow((n_m1), (3 / 2))) + (b0 * Math.pow((n_b0), (3 / 2))) + (h2 * Math.sqrt(Math.pow((m2), 2) + 1) * Math.pow((n_m2), (3 / 2))) + (b2 * Math.pow((n_b2), (3 / 2))) + ((Y - h2) * Math.sqrt(Math.pow((m4), 2) + 1) * Math.pow((n_m4), (3 / 2)))) / Pm), (2 / 3))
            console.log("h1 == h2 && Yn > h1 && Yn <= (h1 + h3) && Yn <= (h2 + h4)")
            verificador = true;
        }

        if (h1 == h2 && Yn > (h1 + h3) || Yn > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            verificador = false;
            break;
        }

        if (h1 == h2 && Yn > (h1 + h3) && Yn > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            verificador = false;
            break;
        }


        //Si h2>h1
        if (h2 > h1 && Yn <= h1) {
            A = (b0 * Yn) + ((m1 * Math.pow((Yn), 2)) / 2) + ((m2 * Math.pow((Yn), 2)) / 2)
            Pm = b0 + Yn * Math.sqrt(Math.pow((m1), 2) + 1) + Yn * Math.sqrt(Math.pow((m2), 2) + 1)
            T = b0 + (m1 * Yn) + (m2 * Yn)
            ne = Math.pow((((b0 * Math.pow((n_b0), (3 / 2))) + (Yn * Math.sqrt(Math.pow((m1), 2) + 1) * Math.pow((n_m1), (3 / 2))) + (Yn * Math.sqrt(Math.pow((m2), 2) + 1) * Math.pow((n_m2), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 > h1 && Yn <= h1")
            verificador = true;
        }
        //revisar
        if (h2 > h1 && Yn > h1 && Yn <= h2) {
            A = b0 * Yn + (m2 * Math.pow((Yn), 2)) / 2 + (m1 * Math.pow((h1), 2)) / 2 + (m3 * Math.pow((Yn - h1), 2)) / 2 + (b1 + m1 * h1) * (Yn - h1)
            Pm = b0 + (Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + Yn * Math.sqrt(Math.pow((m2), 2) + 1)
            T = (Yn - h1) * m3 + b1 + m1 * h1 + b0 + m2 * Yn
            ne = Math.pow((((b0 * Math.pow((n_b0), (3 / 2))) + ((Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) * Math.pow((n_m3), (3 / 2))) + (b1 * Math.pow((n_b1), (3 / 2))) + (h1 * Math.sqrt(Math.pow((m1), 2) + 1) * Math.pow((n_m1), (3 / 2))) + (Yn * Math.sqrt(Math.pow((m2), 2) + 1) * Math.pow((n_m2), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 > h1 && Yn > h1 && Yn <= h2")
            verificador = true
        }

        if (h2 > h1 && Yn > h2 && Yn <= (h1 + h3) && Yn <= (h2 + h4)) {
            A = b0 * Yn + (m2 * Math.pow((h2), 2)) / 2 + (m1 * Math.pow((h1), 2)) / 2 + (m3 * Math.pow((Yn - h1), 2)) / 2 + (b1 + m1 * h1) * (Yn - h1) + (b2 + m2 * h2) * (Yn - h2) + (m4 * Math.pow((Yn - h2), 2)) / 2
            Pm = (Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yn - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = m3 * (Yn - h1) + b1 + m1 * h1 + b0 + m2 * h2 + b2 + m4 * (Yn - h2)
            ne = Math.pow(((((Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) * Math.pow((n_m3), (3 / 2))) + (b1 * Math.pow((n_b1), (3 / 2))) + (h1 * Math.sqrt(Math.pow((m1), 2) + 1) * Math.pow((n_m1), (3 / 2))) + (b0 * Math.pow((n_b0), (3 / 2))) + (h2 * Math.sqrt(Math.pow((m2), 2) + 1) * Math.pow((n_m2), (3 / 2))) + (b2 * Math.pow((n_b2), (3 / 2))) + ((Ynn - h2) * Math.sqrt(1 + Math.pow((m4), 2)) * Math.pow((n_m4), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 > h1 && Yn > h2 && Yn <= (h1 + h3) && Yn <= (h2 + h4)")
            verificador = true;
        }

        if (h2 > h1 && Yn > (h1 + h3) || Yn > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            verificador = false;
            break;
        }

        if (h2 > h1 && Yn > (h1 + h3) && Yn > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            verificador = false;
            break;
        }

        //Si h2<h1

        if (h2 < h1 && Yn <= h2) {
            A = (b0 * Yn) + (m1 * Math.pow((Yn), 2)) / 2 + (m2 * Math.pow((Yn), 2)) / 2
            Pm = b0 + Yn * Math.sqrt(1 + Math.pow((m1), 2)) + Yn * Math.sqrt(1 + Math.pow((m2), 2))
            T = (m1 * Yn) + b0 + (m2 * Yn)
            ne = Math.pow((((b0 * Math.pow((n_b0), (3 / 2))) + (Yn * Math.sqrt(1 + Math.pow((m1), 2)) * Math.pow((n_m1), (3 / 2))) + (Yn * Math.sqrt(1 + Math.pow((m2), 2)) * Math.pow((n_m2), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 < h1 && Yn <= h2")
            verificador = true;
        }

        if (h2 < h1 && Yn > h2 && Yn < h1) {
            A = (b0 * Yn) + (m1 * Math.pow((Yn), 2)) / 2 + (m2 * Math.pow((h2), 2)) / 2 + (m2 * h2 + b2) * (Yn - h2) + (m4 * Math.pow((Yn - h2), 2)) / 2
            Pm = Yn * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yn - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = b0 + (m1 * Yn) + (m2 * h2) + b2 + m4 * (Yn - h2)
            ne = Math.pow((((b0 * Math.pow((n_b0), (3 / 2))) + (Yn * Math.sqrt(1 + Math.pow((m1), 2)) * Math.pow((n_m1), (3 / 2))) + (h2 * Math.sqrt(1 + Math.pow((m2), 2)) * Math.pow((n_m2), (3 / 2))) + (b2 * Math.pow((n_b2), (3 / 2))) + ((Yn - h2) * Math.sqrt(1 + Math.pow((m4), 2)) * Math.pow((n_m4), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 < h1 && Yn > h2 && Yn < h1")
            verificador = true;
        }

        if (h2 < h1 && Yn > h1 && Yn <= (h1 + h3) && Yn <= (h2 + h4)) {
            A = (m3 * Math.pow((Yn - h1), 2)) / 2 + (b1 + m1 * h1) * (Yn - h1) + (m1 * Math.pow((h1), 2)) / 2 + b0 * Yn + (m2 * Math.pow((h2), 2)) / 2 + (b2 + m2 * h2) * (Yn - h2) + (m4 * Math.pow((Yn - h2), 2)) / 2
            Pm = (Yn - h1) * Math.sqrt(Math.pow((m3), 2) + 1) + b1 + h1 * Math.sqrt(Math.pow((m1), 2) + 1) + b0 + h2 * Math.sqrt(Math.pow((m2), 2) + 1) + b2 + (Yn - h2) * Math.sqrt(Math.pow((m4), 2) + 1)
            T = (Yn - h1) * m3 + b1 + m1 * h1 + b0 + m2 * h2 + b2 + m4 * (Yn - h2)
            ne = Math.pow(((((Yn - h1) * Math.sqrt(1 + Math.pow((m3), 2)) * Math.pow((n_m3), (3 / 2))) + (b1 * Math.pow((n_b1), (3 / 2))) + (h1 * Math.sqrt(1 + Math.pow((m1), 2)) * Math.pow((n_m1), (3 / 2))) + (b0 * Math.pow((n_b0), (3 / 2))) + (h2 * Math.sqrt(1 + Math.pow((m2), 2)) * Math.pow((n_m2), (3 / 2))) + (b2 * Math.pow((n_b2), (3 / 2))) + ((Yn - h2) * Math.sqrt(1 + Math.pow((m4), 2)) * Math.pow((n_m4), (3 / 2)))) / Pm), (2 / 3))
            console.log("h2 < h1 && Yn > h1 && Yn <= (h1 + h3) && Yn <= (h2 + h4)")
            verificador = true;
        }

        if (h2 < h1 && Yn > (h1 + h3) || Yn > (h4 + h2)) {
            alert("El canal se desborda por un lado")
            verificador = false;
            break;
        }

        if (h2 < h1 && Yn > (h1 + h3) && Yn > (h4 + h2)) {
            alert("El canal se desborda en los dos lados")
            verificador = false;
            break;
        }


        //Formulas

        Rh = A / Pm
        Rhl.push(Rh)
        Dh = A / T
        Dhl.push(Dh)
        Fr = q / (A * Math.sqrt(9.81 * Dh))
        Frl.push(Fr)
        Es = Yn + ((1 * Math.pow((q), 2)) / (Math.pow((A), 2) * 2 * 9.81))
        Esl.push(Es)
        Fs = (Yn / 2) + (Math.pow((q), 2) / (Math.pow((A), 2) * 2 * 9.81))
        Fsl.push(Fs)
        sF = Math.pow(((q * ne) / (A * Math.pow((Rh), (2 / 3)))), 2)
        sFl.push(sFl)
        Qc = (1 / ne) * A * Math.pow((Rh), (2 / 3)) * Math.pow((So), (1 / 2))
        Qcl.push(Qc)
        cambioQ = q - Qc
        cambioQl.push(cambioQ)
        ynl.push(Yn)
        Al.push(A)
        Pml.push(Pm)
        nel.push(ne)
        Tl.push(T)
        //Para poner los resultados en las tablas
        Yn = Yn + cambioQ / T


    }
    if (verificador = true) {
        let tbodyn = document.getElementById('normalDepthBody');
        tbodyn.innerHTML = "";
        for (let index = 0; index < pasos - 1; index++) {
            let row = ""
            row += "<tr>"
            row += "<td>" + ynl[index].toFixed(4) + "</td>"
            row += "<td>" + Al[index].toFixed(4) + "</td>"
            row += "<td>" + Rhl[index].toFixed(4) + "</td>"
            row += "<td>" + Pml[index].toFixed(4) + "</td>"
            row += "<td>" + Tl[index].toFixed(4) + "</td>"
            row += "<td>" + Dhl[index].toFixed(4) + "</td>"
            row += "<td>" + Frl[index].toFixed(4) + "</td>"
            row += "<td>" + Esl[index].toFixed(4) + "</td>"
            row += "<td>" + Fsl[index].toFixed(4) + "</td>"
            row += "<td>" + nel[index].toFixed(4) + "</td>"
            row += "<td>" + sFl[index].toFixed(4) + "</td>"
            row += "<td>" + Qcl[index].toFixed(4) + "</td>"
            row += "<td>" + cambioQl[index].toFixed(4) + "</td>"
            row += "</tr>"
            tbodyn.innerHTML += row;
        }
        //Yn calculado
        let bodyn = document.getElementById("outputyn");
        bodyn.innerHTML = "<h6>" + Yn.toFixed(4) + "</h6>";
    }

}
